"""
Property class for the 'code' and 'extraproperties' property of toplevel widgets

@copyright: 2002-2007 Alberto Griggio
@copyright: 2014-2016 Carsten Grohmann
@copyright: 2016 Dietmar Schwertberger
@license: MIT (see LICENSE.txt) - THIS PROGRAM COMES WITH NO WARRANTY
"""

import wx

import common
from new_properties import TextPropertyD, GridProperty

from wcodegen.taghandler import BaseXmlBuilderTagHandler


class CodePropertyD(TextPropertyD):
    _HORIZONTAL_LAYOUT = False
    TOOLTIP = ('You can use this property to add some extra code to that generated by wxGlade.\n\n'
               'Please note that you should use this only if you have the "Overwrite existing sources" option set.')
    LABEL = 'Extra code for this widget'

    def __init__(self, value="", name="extracode"):
        TextPropertyD.__init__(self, value, multiline=True, name=name)

    def create_editor(self, panel, sizer):
        TextPropertyD.create_editor(self, panel, sizer)
        font = wx.Font(12, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
        self.text.SetFont(font)



class ExtraPropertiesProperty(GridProperty):
    LABEL = 'Extra properties for this widget'
    TOOLTIP = ('You can use this property to add some extra custom properties to this widget.\n\n'
               'For each property "prop" with value "val", wxGlade will generate a'
               '"widget.SetProp(val)" line (or a "<prop>val</prop>" line for XRC).')

    #def __init__(self, name='extraproperties' ):
    def __init__(self):
        cols = [(_('Property'), GridProperty.STRING),
                (_('Value'),    GridProperty.STRING)]
        value = []
        GridProperty.__init__(self, value, cols, can_insert=False)

    def write(self, outfile, tabs):
        if not self.value: return
        inner_xml = u''
        for name, value in self.value:
            if value:
                inner_xml += common.format_xml_tag( u'property', value.strip(), tabs+1, name=name )
        if inner_xml:
            stmt = common.format_xml_tag( u'extraproperties', inner_xml, tabs, is_xml=True )
            outfile.write(stmt)



class ExtraPropertiesPropertyHandler(BaseXmlBuilderTagHandler):
    strip_char_data = True

    def __init__(self, owner):
        super(ExtraPropertiesPropertyHandler, self).__init__()
        self.owner = owner
        self.props = {}
        self.prop_name = None
        self.curr_prop = []

    def start_elem(self, name, attrs):
        super(ExtraPropertiesPropertyHandler, self).__init__()
        if name == 'property':
            self.prop_name = attrs['name']

    def end_elem(self, name):
        if name == 'property':
            if self.prop_name and self.curr_prop:
                self.props[self.prop_name] = ''.join(self.curr_prop)
            self.prop_name = None
            self.curr_prop = []
        elif name == 'extraproperties':
            self.owner.properties['extraproperties'].set_value(self.props)
            val = [[k, self.props[k]] for k in sorted(self.props.keys())]
            self.owner.extraproperties = val
            return True  # to remove this handler
